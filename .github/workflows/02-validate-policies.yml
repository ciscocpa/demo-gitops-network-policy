name: Validate Network Policies

on:
  pull_request:
    paths:
      - 'tenant-a/policies/**'
      - 'tenant-b/policies/**'
      - '.github/workflows/02-validate-policies.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  check-base-policies:
    name: Protect Base Policies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if base policies were modified
        id: check-base
        run: |
          echo "## Base Policy Protection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get changed files in this PR
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || git diff --name-only HEAD~1 HEAD)

          echo "Changed files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if base policies were modified
          if echo "$CHANGED_FILES" | grep -q "^tenant-[ab]/policies/00-base/"; then
            echo "❌ **ERROR: Base policies cannot be modified by developers!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Base policies include:" >> $GITHUB_STEP_SUMMARY
            echo "- Default deny-all rules" >> $GITHUB_STEP_SUMMARY
            echo "- DNS allow rules" >> $GITHUB_STEP_SUMMARY
            echo "- Monitoring access rules" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "These are managed exclusively by the **security team** (@ciscocpa/security-team)." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "If you need changes to base policies, please contact the security team." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Base policies not modified - check passed" >> $GITHUB_STEP_SUMMARY
          fi

  validate-policy-syntax:
    name: Validate Policy Syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate YAML syntax
        run: |
          echo "## Policy YAML Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          VALID=0
          INVALID=0

          for file in $(find tenant-a/policies tenant-b/policies -name "*.yaml" -o -name "*.yml" 2>/dev/null); do
            echo "Validating: $file"
            set +e  # Temporarily allow errors
            ERROR=$(yq eval '.' "$file" 2>&1 > /dev/null)
            EXIT_CODE=$?
            set -e  # Re-enable exit on error

            if [ $EXIT_CODE -eq 0 ]; then
              echo "✅ $file" >> $GITHUB_STEP_SUMMARY
              ((VALID++))
            else
              echo "❌ $file - INVALID YAML: $ERROR" >> $GITHUB_STEP_SUMMARY
              echo "Error for $file: $ERROR"
              ((INVALID++))
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary:** $VALID valid, $INVALID invalid" >> $GITHUB_STEP_SUMMARY

          if [ $INVALID -gt 0 ]; then
            exit 1
          fi

      - name: Validate Cilium policy structure
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Cilium Policy Structure Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for file in $(find tenant-a/policies tenant-b/policies -name "*.yaml" -o -name "*.yml" 2>/dev/null); do
            # Check if it's a CiliumNetworkPolicy
            if grep -q "kind: CiliumNetworkPolicy\|kind: CiliumClusterwideNetworkPolicy" "$file"; then
              echo "Checking: $file"

              # Validate apiVersion
              if ! grep -q "apiVersion: cilium.io/v2" "$file"; then
                echo "❌ $file - Missing or incorrect apiVersion (should be cilium.io/v2)" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi

              # Check for metadata
              if ! grep -q "metadata:" "$file"; then
                echo "❌ $file - Missing metadata section" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi

              # Check for spec
              if ! grep -q "spec:" "$file"; then
                echo "❌ $file - Missing spec section" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi

              echo "✅ $file - Valid Cilium policy structure" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Check for security anti-patterns
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Anti-Patterns Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          WARNINGS=0

          # Check for unrestricted CIDR in external policies
          if grep -r "0.0.0.0/0" tenant-a/policies/20-external/ tenant-b/policies/20-external/ 2>/dev/null; then
            echo "⚠️ Found unrestricted CIDR (0.0.0.0/0) in external policies" >> $GITHUB_STEP_SUMMARY
            echo "   This requires security team review" >> $GITHUB_STEP_SUMMARY
            ((WARNINGS++))
          fi

          # Check for overly broad port ranges
          if grep -rE "port:.**" tenant-a/policies/ tenant-b/policies/ 2>/dev/null; then
            echo "⚠️ Found wildcard port (*) in policies" >> $GITHUB_STEP_SUMMARY
            echo "   Consider specifying exact ports" >> $GITHUB_STEP_SUMMARY
            ((WARNINGS++))
          fi

          if [ $WARNINGS -eq 0 ]; then
            echo "✅ No security anti-patterns detected" >> $GITHUB_STEP_SUMMARY
          fi

  categorize-changes:
    name: Categorize Policy Changes
    runs-on: ubuntu-latest
    outputs:
      has_internal: ${{ steps.categorize.outputs.has_internal }}
      has_external: ${{ steps.categorize.outputs.has_external }}
      has_base: ${{ steps.categorize.outputs.has_base }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Categorize changes
        id: categorize
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || git diff --name-only HEAD~1 HEAD)

          HAS_INTERNAL=false
          HAS_EXTERNAL=false
          HAS_BASE=false

          if echo "$CHANGED_FILES" | grep -q "^tenant-[ab]/policies/10-internal/"; then
            HAS_INTERNAL=true
          fi

          if echo "$CHANGED_FILES" | grep -q "^tenant-[ab]/policies/20-external/"; then
            HAS_EXTERNAL=true
          fi

          if echo "$CHANGED_FILES" | grep -q "^tenant-[ab]/policies/00-base/"; then
            HAS_BASE=true
          fi

          echo "has_internal=$HAS_INTERNAL" >> $GITHUB_OUTPUT
          echo "has_external=$HAS_EXTERNAL" >> $GITHUB_OUTPUT
          echo "has_base=$HAS_BASE" >> $GITHUB_OUTPUT

          # Create summary
          echo "## Policy Changes Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Changed | Review Required |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Base Policies | $HAS_BASE | Security Team Only |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 External Policies | $HAS_EXTERNAL | Security Team Approval |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏠 Internal Policies | $HAS_INTERNAL | Dev Team (Auto-approved) |" >> $GITHUB_STEP_SUMMARY

      - name: Add labels to PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const hasInternal = '${{ steps.categorize.outputs.has_internal }}' === 'true';
            const hasExternal = '${{ steps.categorize.outputs.has_external }}' === 'true';
            const hasBase = '${{ steps.categorize.outputs.has_base }}' === 'true';

            const labels = [];
            if (hasInternal) labels.push('policy:internal');
            if (hasExternal) labels.push('policy:external', 'needs-security-review');
            if (hasBase) labels.push('policy:base', 'security-team-only');

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📋 Policy Validation Results\n\n${summary}`
            });
